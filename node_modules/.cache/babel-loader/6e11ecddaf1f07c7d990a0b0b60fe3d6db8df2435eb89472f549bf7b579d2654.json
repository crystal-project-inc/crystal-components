{"ast":null,"code":"export function getDiscHex(discType) {\n  switch (discType) {\n    case 'white':\n      return '#fff';\n    case 'black':\n      return '#000';\n    case 'grey':\n      return '#bbbbbb';\n    case 'midnight':\n      return '#01293d';\n    case 'empty':\n      return '#2ca7e4';\n    case 'light-blue':\n      return '#a2e2fc';\n    case 'blue':\n      return '#2ca7e4';\n    case 'D':\n      return '#db3c48';\n    case 'Di':\n      return '#e5561f';\n    case 'DI':\n      return '#f48119';\n    case 'Id':\n      return '#ffb727';\n    case 'I':\n      return '#f7cf0d';\n    case 'Is':\n      return '#d3e000';\n    case 'IS':\n      return '#afd80a';\n    case 'Si':\n      return '#88c100';\n    case 'S':\n      return '#11b21b';\n    case 'Sc':\n      return '#51b48e';\n    case 'SC':\n      return '#00b6bc';\n    case 'Cs':\n      return '#007fb6';\n    case 'C':\n      return '#2f5fa5';\n    case 'Cd':\n      return '#6756b2';\n    case 'CD':\n      return '#93359b';\n    case 'Dc':\n      return '#c62e85';\n    case 'enneagram-':\n      return '#2ca7e4';\n    case 'enneagram-1':\n      return '#db3c48';\n    case 'enneagram-2':\n      return '#f48119';\n    case 'enneagram-3':\n      return '#f7cf0d';\n    case 'enneagram-4':\n      return '#afd80a';\n    case 'enneagram-5':\n      return '#11b21b';\n    case 'enneagram-6':\n      return '#00b6bc';\n    case 'enneagram-7':\n      return '#2f5fa5';\n    case 'enneagram-8':\n      return '#93359b';\n    case 'enneagram-9':\n      return '#c62e85';\n    default:\n      return '#000';\n  }\n}\nexport function getSVGClass(text, discType) {\n  const discHex = getDiscHex(discType).replace('#', '');\n  return `${text}-${discHex}`;\n}\nexport function getSVGClasses(text, discType) {\n  const list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'].slice(0);\n  const object = {};\n  list.forEach(l => {\n    object[l] = getSVGClass(`${l}-${text}`, discType);\n  });\n  return object;\n}\nexport function getBasicClasses(viewBox, discType) {\n  const strokeLinecap = 'round';\n  const strokeLinejoin = 'round';\n  return {\n    xmlns: 'http://www.w3.org/2000/svg',\n    width: '100%',\n    height: '100%',\n    fill: 'none',\n    viewBox: viewBox ? viewBox : '0 0 24 24',\n    strokeWidth: '2',\n    strokeLinecap,\n    strokeLinejoin,\n    stroke: getDiscHex(discType)\n  };\n}","map":{"version":3,"names":["getDiscHex","discType","getSVGClass","text","discHex","replace","getSVGClasses","list","slice","object","forEach","l","getBasicClasses","viewBox","strokeLinecap","strokeLinejoin","xmlns","width","height","fill","strokeWidth","stroke"],"sources":["/Users/almccoo/Documents/code/Crystal/crystal-components/src/lib/svg.ts"],"sourcesContent":["type Letters =\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'g'\n  | 'h'\n  | 'i'\n  | 'j'\n  | 'k'\n  | 'l'\n  | 'm'\n  | 'n'\n  | 'o'\n\nexport interface SVGProps {\n  xmlns: string\n  width: string\n  height: string\n  fill: string\n  viewBox: string\n  strokeWidth: string\n  strokeLinecap: 'round'\n  strokeLinejoin: 'round'\n  stroke: string\n}\n\nexport function getDiscHex(discType: string | undefined) {\n  switch (discType) {\n    case 'white':\n      return '#fff'\n    case 'black':\n      return '#000'\n    case 'grey':\n      return '#bbbbbb'\n    case 'midnight':\n      return '#01293d'\n    case 'empty':\n      return '#2ca7e4'\n    case 'light-blue':\n      return '#a2e2fc'\n    case 'blue':\n      return '#2ca7e4'\n    case 'D':\n      return '#db3c48'\n    case 'Di':\n      return '#e5561f'\n    case 'DI':\n      return '#f48119'\n    case 'Id':\n      return '#ffb727'\n    case 'I':\n      return '#f7cf0d'\n    case 'Is':\n      return '#d3e000'\n    case 'IS':\n      return '#afd80a'\n    case 'Si':\n      return '#88c100'\n    case 'S':\n      return '#11b21b'\n    case 'Sc':\n      return '#51b48e'\n    case 'SC':\n      return '#00b6bc'\n    case 'Cs':\n      return '#007fb6'\n    case 'C':\n      return '#2f5fa5'\n    case 'Cd':\n      return '#6756b2'\n    case 'CD':\n      return '#93359b'\n    case 'Dc':\n      return '#c62e85'\n    case 'enneagram-':\n      return '#2ca7e4'\n    case 'enneagram-1':\n      return '#db3c48'\n    case 'enneagram-2':\n      return '#f48119'\n    case 'enneagram-3':\n      return '#f7cf0d'\n    case 'enneagram-4':\n      return '#afd80a'\n    case 'enneagram-5':\n      return '#11b21b'\n    case 'enneagram-6':\n      return '#00b6bc'\n    case 'enneagram-7':\n      return '#2f5fa5'\n    case 'enneagram-8':\n      return '#93359b'\n    case 'enneagram-9':\n      return '#c62e85'\n    default:\n      return '#000'\n  }\n}\n\nexport function getSVGClass(text: string, discType?: string) {\n  const discHex = getDiscHex(discType).replace('#', '')\n\n  return `${text}-${discHex}`\n}\n\nexport function getSVGClasses(\n  text: string,\n  discType: string | undefined,\n): Record<Letters, string> {\n  const list = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n  ].slice(0)\n  const object: Record<string, string> = {}\n\n  list.forEach(l => {\n    object[l] = getSVGClass(`${l}-${text}`, discType)\n  })\n\n  return object as Record<Letters, string>\n}\n\nexport function getBasicClasses(\n  viewBox: string,\n  discType: string | undefined,\n): SVGProps {\n  type capTypes = 'round' | 'inherit' | 'butt' | 'undefined'\n\n  const strokeLinecap: capTypes = 'round'\n  const strokeLinejoin: capTypes = 'round'\n\n  return {\n    xmlns: 'http://www.w3.org/2000/svg',\n    width: '100%',\n    height: '100%',\n    fill: 'none',\n    viewBox: viewBox ? viewBox : '0 0 24 24',\n    strokeWidth: '2',\n    strokeLinecap,\n    strokeLinejoin,\n    stroke: getDiscHex(discType),\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}